{
  "Comment": "A Step Functions workflow that performs tasks using Athena and S3",
  "StartAt": "ReadConfigFile",
  "States": {
    "ReadConfigFile": {
      "Type": "Task",
      "Resource": "${read_config_file_lambda_arn}",
      "ResultPath": "$.config",
      "Parameters": {
        "config_s3_key": "config/process-run-reports-config.json"
      },
      "Next": "ShouldRun"
    },
    "ShouldRun": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.config.should_run",
          "NumericEquals": 1,
          "Next": "RunContextQuery"
        }
      ],
      "Default": "Hold"
    },
    "Hold": {
      "Type": "Pass",
      "End": true
    },
    "RunContextQuery": {
      "Type": "Task",
      "Resource": "${run_ctas_athena_lambda_arn}",
      "Parameters": {
        "bucket_name.$": "$.config.process_bucket_name",
        "data_base.$": "$.config.database",
        "work_group.$": "$.config.workgroup",
        "drop_query.$": "$.config.context.drop.query",
        "ctas_query.$": "$.config.context.create.query",
        "drop_output_location.$": "$.config.drop_queries_output_prefix",
        "ctas_output_location.$": "$.config.context.create.output_prefix"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultPath": null,
      "Next": "MainParallel"
    },
    "MainParallel": {
      "Type": "Parallel",
      "Next": "RunToDeleteQuery",
      "OutputPath": "$[0]",
      "Branches": [
        {
          "StartAt": "RunLogicQuery",
          "States": {
            "RunLogicQuery": {
              "Type": "Task",
              "Resource": "${run_ctas_athena_lambda_arn}",
              "Parameters": {
                "bucket_name.$": "$.config.process_bucket_name",
                "data_base.$": "$.config.database",
                "work_group.$": "$.config.workgroup",
                "drop_query.$": "$.config.logic.drop.query",
                "ctas_query.$": "$.config.logic.create.query",
                "drop_output_location.$": "$.config.drop_queries_output_prefix",
                "ctas_output_location.$": "$.config.logic.create.output_prefix"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "ResultPath": null,
              "Next": "MoveFinalResult"
            },
            "MoveFinalResult": {
                      "Type": "Task",
                      "Resource": "${move_s3_objects_lambda_arn}",
                      "Parameters": {
                        "source_bucket.$": "$.config.process_bucket_name",
                        "source_path.$": "States.Format('{}tables/', $.config.logic.create.output_prefix)",
                        "destination_bucket.$": "$.config.processed_bucket_name",
                        "destination_path.$": "States.Format('{}run-reports/', $.config.processed_parquet_prefix)"
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException"
                          ],
                          "IntervalSeconds": 2,
                          "MaxAttempts": 6,
                          "BackoffRate": 2
                        }
                      ],
                      "ResultPath": null,
                      "End": true
                    }
          }
        },
        {
          "StartAt": "RunLeftoverQuery",
          "States": {
            "RunLeftoverQuery": {
              "Type": "Task",
              "Resource": "${run_ctas_athena_lambda_arn}",
              "Parameters": {
                "bucket_name.$": "$.config.process_bucket_name",
                "data_base.$": "$.config.database",
                "work_group.$": "$.config.workgroup",
                "drop_query.$": "$.config.leftover.drop.query",
                "ctas_query.$": "$.config.leftover.create.query",
                "drop_output_location.$": "$.config.drop_queries_output_prefix",
                "ctas_output_location.$": "$.config.leftover.create.output_prefix"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "ResultPath": null,
              "End": true
            }
          }
        }
      ]
    },
    "RunToDeleteQuery": {
      "Type": "Task",
      "Resource": "${run_ctas_athena_lambda_arn}",
      "Parameters": {
        "bucket_name.$": "$.config.process_bucket_name",
        "data_base.$": "$.config.database",
        "work_group.$": "$.config.workgroup",
        "drop_query.$": "$.config.to_delete.drop.query",
        "ctas_query.$": "$.config.to_delete.create.query",
        "drop_output_location.$": "$.config.drop_queries_output_prefix",
        "ctas_output_location.$": "$.config.to_delete.create.output_prefix"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "ResultPath": null,
      "Next": "DeleteProcessedObjects"
    },
    "DeleteProcessedObjects": {
      "Type": "Task",
      "Resource": "${delete_s3_objects_lambda_arn}",
      "Parameters": {
        "to_delete_table_name.$": "$.config.to_delete_table_name",
        "to_delete_column_name.$": "$.config.to_delete_column_name",
        "bucket_name.$": "$.config.process_bucket_name",
        "read_to_delete_out_path.$": "$.config.read_to_delete_out_path",
        "database.$": "$.config.database",
        "work_group.$": "$.config.workgroup"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "ResultPath": null,
      "End": true
    }
  }
}